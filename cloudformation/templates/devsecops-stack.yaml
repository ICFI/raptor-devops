AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a simplie multi-az VPC with all public subnets
Parameters:
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC
    Type: List<AWS::EC2::AvailabilityZone::Name>
  PublicSubnet1CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  InstanceType:
    Description: EC2 instance type
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
    Type: String
  AllowedIP:
    Description: The IP CIDR allowed to access the application
    Type: String
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
  Version:
    Description: Stack version
    Type: String
Conditions:
  NVirginiaRegionCondition: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
Mappings:
  RegionAmazonECSOptimizedAMIMapping:
    us-east-1:
      AMI: ami-04351e12
    us-east-2:
      AMI: ami-207b5a45
    us-west-1:
      AMI: ami-7d664a1d
    us-west-2:
      AMI: ami-ff15039b
Resources:

  # --- VPC ---

  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Join [ '', [ !Ref 'AWS::Region', '.compute.internal' ] ]
      DomainNameServers:
        - AmazonProvidedDNS
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: 'default'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCDHCPOptionsAssociation:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Network
          Value: Public
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select
        - '0'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: Public subnet 1
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !Ref AvailabilityZones
      Tags:
        - Key: Name
          Value: Public subnet 2
        - Key: Network
          Value: Public
      MapPublicIpOnLaunch: true
  PublicSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  # --- ECS ---

  EcsCluster:
      Type: 'AWS::ECS::Cluster'
  EcsAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref EcsLaunchConfig
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
  EcsLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      ImageId: !FindInMap [ RegionAmazonECSOptimizedAMIMapping, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair # TODO: Remove me
      SecurityGroups:
        - !Ref EcsClusterSecurityGroup
        - !Ref EcsContainerInstancesSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -ex
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EcsLaunchConfig --region ${AWS::Region}
          mkdir -p /mnt/storage
          echo "${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/storage nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
          echo 'waiting for efs filesystem '
          until host ${EfsFileSystem}.efs.${AWS::Region}.amazonaws.com; do
              printf '.'
              sleep 5
          done
          mount -a
          [ ! -d /mnt/storage/jenkins ] && mkdir /mnt/storage/jenkins
          chown -R 1000:1000 /mnt/storage/jenkins
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            '/etc/ecs/ecs.config':
              content: !Sub 'ECS_CLUSTER=${EcsCluster}'
          packages:
            yum:
              nfs-utils: []
              bind-utils: []
  EcsClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group to allow all traffic between ECS instances and ELB
  EcsClusterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      FromPort: '-1'
      GroupId: !Ref EcsClusterSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref EcsClusterSecurityGroup
      ToPort: '-1'
  EcsContainerInstancesSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for ECS container instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AllowedIP
  EcsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EcsInstanceRole
  EcsInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AmazonEC2ContainerServiceJenkinsPluginRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:ListClusters'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:ListTaskDefinitions'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeTasks'
                  - 'ecs:RunTask'
                  - 'ecs:StopTask'
                Resource: '*'
  EcsServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - 'ecs.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
  CloudwatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 7

  # --- EFS ---

  EfsFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Ref EcsCluster
      PerformanceMode: generalPurpose
  EfsMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups:
        - !Ref EfsMountTargetSecurityGroup
      SubnetId: !Ref PublicSubnet1
  EfsMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SecurityGroups:
        - !Ref EfsMountTargetSecurityGroup
      SubnetId: !Ref PublicSubnet2
  EfsMountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow inbound NFS for EFS mount target from ECS container instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref EcsContainerInstancesSecurityGroup

  # --- ECR ---

  ContainerRegistry:
    Type: 'AWS::ECR::Repository'

  # --- Load Balancer ---

  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Web access to load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref AllowedIP
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
      SecurityGroups:
        - !Ref 'EcsSecurityGroup'
        - !Ref 'EcsClusterSecurityGroup'
  LbJenkinsTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: LoadBalancer
    Properties:
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  LbListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LbJenkinsTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  LbListenerJenkinsWorker:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: EcsServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LbJenkinsTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 50000
      Protocol: HTTP

  # --- Jenkins ---

  JenkinsTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -jenkins]]
      ContainerDefinitions:
        - Name: jenkins
          Cpu: '100'
          Image: 'spohnan/jenkins-ecs:latest'
          Memory: '2048'
          Environment:
            - Name: JAVA_OPTS
              Value: '-Djenkins.install.runSetupWizard=false'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'jenkins'
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 50000
          Privileged: true
          MountPoints:
            - ContainerPath: '/var/jenkins_home'
              SourceVolume: 'jenkins-storage'
            - ContainerPath: '/var/run/docker.sock'
              SourceVolume: 'docker-sock'
      Volumes:
        - Name: 'jenkins-storage'
          Host:
            SourcePath: '/mnt/storage/jenkins'
        - Name: 'docker-sock'
          Host:
            SourcePath: '/var/run/docker.sock'
  JenkinsService:
    Type: 'AWS::ECS::Service'
    DependsOn: LbListenerHTTP
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: jenkins
        ContainerPort: 8080
        TargetGroupArn: !Ref LbJenkinsTargetGroup
      Role: !Ref EcsServiceRole
      TaskDefinition: !Ref JenkinsTaskDefinition

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: The DNS name of the load balancer
  Version:
    Value: !Ref Version
    Description: Stack version